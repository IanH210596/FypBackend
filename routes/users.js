var express = require('express');
var router = express.Router();
const User = require('../models/user.js')
const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken');
const user = require('../models/user.js');


// /createUser endpoint used for making requests to register new users
router.post('/createUser', (req, res, next) => {
  //password entered upon user registration is encrypted using the bcrypt package and hash function
  bcrypt.hash(req.body.password, 10).then(hash => {
    const user = new User({
      firstName: req.body.firstName,
      lastName: req.body.lastName,
      mobile: req.body.mobile,
      email: req.body.email,
      password: hash,
    });
    // once the password is encrypted, the hashed password is used along with the user's other registration details in the request body and saved to MongoDB
    user.save()
      .then(result => {
        // if the details are saved successfully a success response and message is returned
        res.status(201).json({
          message: "User Created Successfully",
          result: result
        });
      })
      .catch(() => {
        //catch statement used to catch any errors and return an error status and message in response
        res.status(500).json({
          message: "Invalid User Details Provided!"
        });
      });
  });
});

// /login endpoint used for making requests to login a user
router.post('/login', (req, res, next) => {
  let fetchedUser;
  // user searched for in MongoDB User collection based on request email provided
  User.findOne({email: req.body.email})
    .then(user => {
      console.log(user);
      if(!user) {
        // if no user is found, then an error status and message is returned in response
        return res.status(401).json({
          message: "Invalid User Credentials!"
        })
    }
    fetchedUser = user;
    // else for the found email, the corresponding user's saved hashed password is compared with the password provided in login request using bcrypt compare function
    return bcrypt.compare(req.body.password, user.password)
  })
  .then(result => {
    if(!result) {
      // if the password provided does not match, then an error status and message is returned in response
      return res.status(401).json({
        message: "Invalid User Credentials!"
      })
    }
    // else if the password matches, then a token is generated by the server that is valid for 1 hour, 
    const token = jwt.sign(
      {email: fetchedUser.email, userId: fetchedUser._id}, 
      'very_long_super_strong_afaskgakjhkjakjghalkjhgkajslkjaskjg_secret_string', 
      {expiresIn: "1h"}
    );
    // if the user has provided valid email and password at login, then a success status and token (valid for 1 hr) are provided in response
    res.status(200).json({
      token: token,
      expiresIn: 3600
    });
  })
  .catch(err => {
    //catch statement used to catch any errors and return an error status and message in response
    return res.status(401).json({
      message: "Authentication Failed!"
    })
  })
});


module.exports = router;
